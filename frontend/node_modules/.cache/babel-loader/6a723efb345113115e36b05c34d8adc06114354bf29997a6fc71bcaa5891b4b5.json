{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tzei_Project_Pro\\\\Project07-Healthcare\\\\frontend\\\\src\\\\context\\\\PrescriptionContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { getPrescriptionsByPatientID } from \"../services/PrescriptionService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PrescriptionContext = /*#__PURE__*/createContext();\nexport const PrescriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [prescriptions, setPrescriptions] = useState({});\n  const handlGetPrescriptionsByPatientID = async patientID => {\n    const result = await getPrescriptionsByPatientID(patientID);\n    if (result.success) {\n      setPrescriptions(result.prescriptions);\n    }\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(PrescriptionContext.Provider, {\n    value: {\n      prescriptions,\n      handlGetPrescriptionsByPatientID\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_s(PrescriptionProvider, \"kRhhO0rNAHbMyp4v9l2ijRIpUXk=\");\n_c = PrescriptionProvider;\nvar _c;\n$RefreshReg$(_c, \"PrescriptionProvider\");","map":{"version":3,"names":["createContext","useState","getPrescriptionsByPatientID","jsxDEV","_jsxDEV","PrescriptionContext","PrescriptionProvider","children","_s","prescriptions","setPrescriptions","handlGetPrescriptionsByPatientID","patientID","result","success","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Tzei_Project_Pro/Project07-Healthcare/frontend/src/context/PrescriptionContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport { getPrescriptionsByPatientID } from \"../services/PrescriptionService\";\r\n\r\nexport const PrescriptionContext = createContext()\r\n\r\nexport const PrescriptionProvider = ({children}) => {\r\n\r\n    const [prescriptions, setPrescriptions] = useState({})\r\n\r\n    const handlGetPrescriptionsByPatientID = async (patientID) => {\r\n        const result = await getPrescriptionsByPatientID(patientID)\r\n\r\n        if (result.success) {\r\n            setPrescriptions(result.prescriptions)\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    return (\r\n        <PrescriptionContext.Provider value={{ prescriptions, handlGetPrescriptionsByPatientID }}>\r\n            {children}\r\n        </PrescriptionContext.Provider>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,2BAA2B,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,OAAO,MAAMC,mBAAmB,gBAAGL,aAAa,CAAC,CAAC;AAElD,OAAO,MAAMM,oBAAoB,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAEhD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtD,MAAMU,gCAAgC,GAAG,MAAOC,SAAS,IAAK;IAC1D,MAAMC,MAAM,GAAG,MAAMX,2BAA2B,CAACU,SAAS,CAAC;IAE3D,IAAIC,MAAM,CAACC,OAAO,EAAE;MAChBJ,gBAAgB,CAACG,MAAM,CAACJ,aAAa,CAAC;IAC1C;IAEA,OAAOI,MAAM;EACjB,CAAC;EAED,oBACIT,OAAA,CAACC,mBAAmB,CAACU,QAAQ;IAACC,KAAK,EAAE;MAAEP,aAAa;MAAEE;IAAiC,CAAE;IAAAJ,QAAA,EACpFA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEvC,CAAC;AAAAZ,EAAA,CAnBYF,oBAAoB;AAAAe,EAAA,GAApBf,oBAAoB;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}